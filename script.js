const fs = require('fs');
const chalk = require('chalk');

// need to take directories as input
// need to detect absolute vs relative paths
// need to resolve paths from relative to absolute
const srcDirectory = 'icons';
const buildDirectory = '.';

function buildIcons() {
  return new Promise((resolveBuild, rejectBuild) => {
    process.on('unhandledRejection', err => {
      throw err;
      process.exit(1);
    });

    fs.readdir(srcDirectory, (err, files) => {
      if (err) throw err;

      files = files.filter(file => {
        return file.endsWith('.svg');
      });

      let iconArray = [];
      iconArray.length = files.length;

      console.log('Loading icon files...');
      const didReadFiles = files.map((file, index, arr) => {
        return new Promise((resolve, reject) => {
          fs.readFile(
            srcDirectory + '/' + file,
            {encoding: 'utf8'},
            (err, data) => {
              if (err) {
                console.log(chalk.yellow(`Failed to add file ${file}:`), data);
                resolve();
              }

              iconArray[index] = data;
              resolve();
            }
          );
        });
      });

      Promise.all(didReadFiles)
      .then(() => {
        console.log('Writing icon sheet to file...');
        let iconFile = '/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MANUALLY EDIT */\n'
          + 'import React, { Component } from \'react\';';
        
        iconArray.forEach((icon, index) => {
          const fileName = files[index].replace(/\.svg$/, '');
          iconFile += `\n\nexport class ${fileName} extends Component {\n\trender() {\n\t\treturn (\n`
            + icon.replace(/(\s*fill="#000"|\s*xmlns="http:\/\/www.w3.org\/2000\/svg")/ig, '')
                  .replace('<svg', '<svg {...this.props}')
            + '\n\t\t);\n\t}\n}';
        });

        fs.writeFile(buildDirectory, iconFile, function (err) {
          if (err) throw err;
          console.log(chalk.green('Compiled icons successfully.'));
          resolveBuild();
        });
      });
    });
  });
}

module.exports = buildIcons;